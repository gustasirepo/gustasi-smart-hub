import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { motion } from "framer-motion";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";

// Form validation schema
const formSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters" }),
  email: z.string().email({ message: "Please enter a valid email address" }),
  phone: z.string().min(10, { message: "Please enter a valid phone number" }),
  restaurantName: z.string().min(2, { message: "Please enter your restaurant name" }),
  preferredDate: z.string().min(1, { message: "Please select a preferred date" }),
  preferredTime: z.string().min(1, { message: "Please select a preferred time" }),
  message: z.string().optional(),
});

type FormData = z.infer<typeof formSchema>;

interface DemoFormProps {
  isSuccess: boolean;
  isSubmitting: boolean;
  errors: any;
  register: any;
  onSubmit: (e?: React.BaseSyntheticEvent) => Promise<void>;
  onReset: () => void;
}

const DemoForm: React.FC<DemoFormProps> = ({
  isSuccess,
  isSubmitting,
  errors,
  register,
  onSubmit,
  onReset,
}) => (
  <motion.div 
    initial={{ opacity: 0, x: -20 }}
    animate={{ opacity: 1, x: 0 }}
    transition={{ delay: 0.2, duration: 0.5 }}
    className="w-full lg:w-1/2 bg-white rounded-2xl shadow-xl p-8 border border-amber-100"
  >
    {isSuccess ? (
      <div className="text-center py-12">
        <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
          <svg className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
          </svg>
        </div>
        <h2 className="text-2xl font-bold text-slate-800 mb-2">Thank You!</h2>
        <p className="text-slate-600 mb-6">We've received your demo request. Our team will contact you shortly.</p>
        <button
          onClick={onReset}
          className="px-6 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition-colors"
        >
          Schedule Another Demo
        </button>
      </div>
    ) : (
      <form onSubmit={onSubmit} className="space-y-6">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-bold text-slate-800">Request a Demo</h2>
          <p className="text-slate-500 mt-2">Fill out the form and our team will get back to you within 24 hours.</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-slate-700 mb-1">Full Name *</label>
            <input
              type="text"
              id="name"
              {...register("name")}
              className={`w-full px-4 py-3 rounded-lg border ${
                errors.name ? 'border-red-500' : 'border-slate-300 focus:border-amber-500'
              } focus:ring-2 focus:ring-amber-500/20 transition`}
              placeholder="Your name"
            />
            {errors.name && (
              <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
            )}
          </div>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-slate-700 mb-1">Email *</label>
            <input
              type="email"
              id="email"
              {...register("email")}
              className={`w-full px-4 py-3 rounded-lg border ${
                errors.email ? 'border-red-500' : 'border-slate-300 focus:border-amber-500'
              } focus:ring-2 focus:ring-amber-500/20 transition`}
              placeholder="your@email.com"
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="phone" className="block text-sm font-medium text-slate-700 mb-1">Phone Number *</label>
            <input
              type="tel"
              id="phone"
              {...register("phone")}
              className={`w-full px-4 py-3 rounded-lg border ${
                errors.phone ? 'border-red-500' : 'border-slate-300 focus:border-amber-500'
              } focus:ring-2 focus:ring-amber-500/20 transition`}
              placeholder="+1 (___) ___-____"
            />
            {errors.phone && (
              <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>
            )}
          </div>
          <div>
            <label htmlFor="restaurantName" className="block text-sm font-medium text-slate-700 mb-1">Restaurant Name *</label>
            <input
              type="text"
              id="restaurantName"
              {...register("restaurantName")}
              className={`w-full px-4 py-3 rounded-lg border ${
                errors.restaurantName ? 'border-red-500' : 'border-slate-300 focus:border-amber-500'
              } focus:ring-2 focus:ring-amber-500/20 transition`}
              placeholder="Your restaurant name"
            />
            {errors.restaurantName && (
              <p className="mt-1 text-sm text-red-600">{errors.restaurantName.message}</p>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="preferredDate" className="block text-sm font-medium text-slate-700 mb-1">Preferred Date *</label>
            <input
              type="date"
              id="preferredDate"
              {...register("preferredDate")}
              className={`w-full px-4 py-3 rounded-lg border ${
                errors.preferredDate ? 'border-red-500' : 'border-slate-300 focus:border-amber-500'
              } focus:ring-2 focus:ring-amber-500/20 transition`}
              min={new Date().toISOString().split('T')[0]}
            />
            {errors.preferredDate && (
              <p className="mt-1 text-sm text-red-600">{errors.preferredDate.message}</p>
            )}
          </div>
          <div>
            <label htmlFor="preferredTime" className="block text-sm font-medium text-slate-700 mb-1">Preferred Time *</label>
            <select
              id="preferredTime"
              {...register("preferredTime")}
              className={`w-full px-4 py-3 rounded-lg border ${
                errors.preferredTime ? 'border-red-500' : 'border-slate-300 focus:border-amber-500'
              } focus:ring-2 focus:ring-amber-500/20 transition`}
              defaultValue=""
            >
              <option value="" disabled>Select a time</option>
              {['09:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '01:00 PM', '02:00 PM', '03:00 PM'].map((time) => (
                <option key={time} value={time}>{time}</option>
              ))}
            </select>
            {errors.preferredTime && (
              <p className="mt-1 text-sm text-red-600">{errors.preferredTime.message}</p>
            )}
          </div>
        </div>

        <div>
          <label htmlFor="message" className="block text-sm font-medium text-slate-700 mb-1">Additional Information</label>
          <textarea
            id="message"
            {...register("message")}
            rows={4}
            className="w-full px-4 py-3 rounded-lg border border-slate-300 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition"
            placeholder="Tell us about your restaurant and any specific needs..."
          />
        </div>

        <div className="pt-2">
          <button
            type="submit"
            disabled={isSubmitting}
            className={`w-full py-3 px-6 rounded-lg font-medium text-white ${
              isSubmitting 
                ? 'bg-amber-400 cursor-not-allowed' 
                : 'bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700 shadow-lg hover:shadow-amber-500/20'
            } transition-all duration-300 flex items-center justify-center`}
          >
            {isSubmitting ? (
              <>
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Processing...
              </>
            ) : 'Schedule Demo'}
          </button>
          <p className="mt-3 text-xs text-slate-500 text-center">
            By submitting this form, you agree to our{' '}
            <a href="/privacy" className="text-amber-600 hover:underline">Privacy Policy</a> and{' '}
            <a href="/terms" className="text-amber-600 hover:underline">Terms of Service</a>.
          </p>
        </div>
      </form>
    )}
  </motion.div>
);

const InfoSection = () => (
  <motion.div 
    initial={{ opacity: 0, x: 20 }}
    animate={{ opacity: 1, x: 0 }}
    transition={{ delay: 0.4, duration: 0.5 }}
    className="w-full lg:w-1/2 space-y-8"
  >
    <div className="bg-gradient-to-br from-amber-50 to-amber-100 rounded-2xl p-8 border border-amber-200">
      <h3 className="text-xl font-bold text-slate-800 mb-4">What to Expect</h3>
      <ul className="space-y-4">
        {[
          '30-minute personalized demo of our platform',
          'See how Gustasi can streamline your operations',
          'Get answers to all your questions',
          'No obligation, no pressure'
        ].map((item, index) => (
          <li key={index} className="flex items-start">
            <svg className="h-5 w-5 text-amber-500 mt-0.5 mr-3 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            <span className="text-slate-700">{item}</span>
          </li>
        ))}
      </ul>
    </div>

    <div className="bg-white rounded-2xl shadow-lg p-8 border border-slate-200">
      <h3 className="text-xl font-bold text-slate-800 mb-4">Contact Us</h3>
      <div className="space-y-4">
        <div className="flex items-start">
          <div className="flex-shrink-0 h-10 w-10 rounded-full bg-amber-100 flex items-center justify-center">
            <svg className="h-5 w-5 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-slate-500">Email us at</p>
            <a href="mailto:demo@gustasi.com" className="text-base font-medium text-amber-600 hover:text-amber-700">demo@gustasi.com</a>
          </div>
        </div>
        
        <div className="flex items-start">
          <div className="flex-shrink-0 h-10 w-10 rounded-full bg-amber-100 flex items-center justify-center">
            <svg className="h-5 w-5 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
            </svg>
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-slate-500">Call us at</p>
            <a href="tel:+18005551234" className="text-base font-medium text-slate-900 hover:text-amber-600">+1 (800) 555-1234</a>
          </div>
        </div>
      </div>
    </div>
  </motion.div>
);

export default function ScheduleDemo() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<FormData>({
    resolver: zodResolver(formSchema),
  });

  const onSubmit = async (data: FormData) => {
    setIsSubmitting(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      console.log("Form submitted:", data);
      setIsSuccess(true);
      reset();
    } catch (error) {
      console.error("Error submitting form:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-amber-50 to-white flex flex-col">
      <Navbar />
      <main className="flex-1 py-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="text-center mb-12"
          >
            <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-amber-600 to-orange-600 bg-clip-text text-transparent">
              Schedule a Demo
            </h1>
            <p className="text-lg text-slate-600 max-w-2xl mx-auto">
              Experience how Gustasi can transform your restaurant operations. Book a personalized demo today.
            </p>
          </motion.div>
          
          <div className="flex flex-col lg:flex-row gap-12 items-start">
            <DemoForm 
              isSuccess={isSuccess}
              isSubmitting={isSubmitting}
              errors={errors}
              register={register}
              onSubmit={handleSubmit(onSubmit)}
              onReset={() => setIsSuccess(false)}
            />
            <InfoSection />
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
}
